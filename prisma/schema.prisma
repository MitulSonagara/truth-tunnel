datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 String         @id @default(auto()) @map("_id") @db.ObjectId
  name               String?
  email              String         @unique
  username           String         @unique
  isVerified         Boolean        @default(false)
  image              String?
  password           String?
  isAcceptingMessage Boolean        @default(true)
  accounts           Account[]
  sessions           Session[]
  messages           Message[]
  verifyCode         String?
  forgotOTP          String?
  verifyCodeExpiry   DateTime?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  encryptionKey      EncryptionKey?
}

model EncryptionKey {
  id                  String @id @default(auto()) @map("_id") @db.ObjectId
  publicKey           String
  userId              String @unique @db.ObjectId
  testEncryption      String @default("unsecured")
  encryptedPrivateKey String

  user User @relation(fields: [userId], references: [id])

  @@unique([encryptedPrivateKey, publicKey])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String

  access_token  String? @db.String
  expires_at    Int?
  token_type    String?
  scope         String?
  id_token      String? @db.String
  session_state String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
